// ======== HTMLË¶ÅÁ¥†ÂèñÂæó ========
const video = document.getElementById('video');
const canvas = document.getElementById('canvas');
const ctx = canvas.getContext('2d');
const startResetBtn = document.getElementById('startResetBtn');

// Áµ±Ë®àË°®Á§∫
const totalChewsEl = document.getElementById('totalChews');
const elapsedTimeEl = document.getElementById('elapsedTime');
const paceEl = document.getElementById('pace');

// Â§©Ê∞óË°®Á§∫
const weatherDisplay = document.getElementById('weatherDisplay');
const weatherIcon = document.getElementById('weatherIcon');
const weatherLabel = document.getElementById('weatherLabel');
const weatherMessage = document.getElementById('weatherMessage');

// ======== Áä∂ÊÖãÂ§âÊï∞ ========
let isTracking = false;
let startTime = 0;
let updateInterval = null;

let stats = { chewCount: 0, elapsedTime: 0, pace: 0 };

// ÂíÄÂöºÊ§úÂá∫Áî®
let baseline = null;
let lastState = "closed";
let ratioHistory = [];
let lastChewTime = 0;
const SMOOTH_WINDOW = 5;
const OPEN_THRESHOLD = 1.09;
const CLOSE_THRESHOLD = 1.04;
const chewCooldown = 200; // ms

// ======== FaceMeshÂàùÊúüÂåñ ========
const faceMesh = new FaceMesh({
  locateFile: (file) => `https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh/${file}`,
});
faceMesh.setOptions({
  maxNumFaces: 1,
  minDetectionConfidence: 0.6,
  minTrackingConfidence: 0.6,
});

let lastLandmarks = null;

// ======== FaceMeshÂá¶ÁêÜÔºàÁµ±ÂêàÁâàÔºâ ========
faceMesh.onResults((results) => {
  ctx.save();
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.drawImage(results.image, 0, 0, canvas.width, canvas.height);

  if (results.multiFaceLandmarks && results.multiFaceLandmarks.length > 0) {
    const landmarks = results.multiFaceLandmarks[0];
    lastLandmarks = landmarks;
    const ratio = computeNormalizedRatio(landmarks);

    if (baseline !== null) {
      const diff = ratio / baseline;
      ratioHistory.push(diff);
      if (ratioHistory.length > SMOOTH_WINDOW) ratioHistory.shift();

      // ÁßªÂãïÂπ≥Âùá„Åß„Çπ„É†„Éº„Ç∏„É≥„Ç∞
      const smoothRatio = ratioHistory.reduce((a, b) => a + b, 0) / ratioHistory.length;

      const now = Date.now();
      if (smoothRatio > OPEN_THRESHOLD && lastState === "closed") {
        lastState = "open";
      }
      else if (smoothRatio < CLOSE_THRESHOLD && lastState === "open") {
        if (now - lastChewTime > chewCooldown) {
          stats.chewCount++;
          lastChewTime = now;
        }
        lastState = "closed";
      }
    }

  } 

  ctx.restore();
});


// ======== Áµ±Ë®àÊõ¥Êñ∞ ========
function updateStats() {
  if (!isTracking) return;

  const elapsedSeconds = Math.floor((Date.now() - startTime) / 1000);
  stats.elapsedTime = elapsedSeconds;
  stats.pace = elapsedSeconds > 0 ? Math.round((stats.chewCount / elapsedSeconds) * 60) : 0;

  totalChewsEl.textContent = stats.chewCount;
  const mins = Math.floor(elapsedSeconds / 60);
  const secs = elapsedSeconds % 60;
  elapsedTimeEl.textContent = `${mins}:${String(secs).padStart(2, '0')}`;
  paceEl.textContent = `${stats.pace} Âõû/ÂàÜ`;

  updateWeather(stats.pace);
}

// ======== Â§©Ê∞óÊõ¥Êñ∞ ========
function updateWeather(pace) {
  let weather;
  if (!isTracking) {
    weather = { icon: '‚òÅÔ∏è', label: 'ÂæÖÊ©ü‰∏≠', message: '„ÄåË®àÊ∏¨ÈñãÂßã„Äç„ÇíÊäº„Åó„Å¶„Åè„Å†„Åï„ÅÑ', type: 'waiting' };
  } else if (pace > 70) {
    weather = { icon: '‚õàÔ∏è', label: 'Âµê', message: 'ÈÄü„Åô„Åé„Åß„ÅôÔºÅ„ÇÇ„Å£„Å®„ÇÜ„Å£„Åè„ÇäÔºÅ', type: 'storm' };
  } else if (pace >= 50) {
    weather = { icon: 'üåßÔ∏è', label: 'Èõ®', message: 'Â∞ë„ÅóÈÄü„ÅÑ„Éö„Éº„Çπ„Åß„Åô', type: 'rain' };
  } else if (pace > 0) {
    weather = { icon: '‚òÄÔ∏è', label: 'Êô¥„Çå', message: '„Å®„Å¶„ÇÇËâØ„ÅÑ„Éö„Éº„Çπ„Åß„ÅôÔºÅ', type: 'sunny' };
  } else {
    weather = { icon: '‚òÄÔ∏è', label: 'Êô¥„Çå', message: 'È£ü‰∫ã„ÇíÂßã„ÇÅ„Åæ„Åó„Çá„ÅÜÔºÅ', type: 'sunny' };
  }

  weatherDisplay.className = 'weather-display ' + weather.type;
  weatherIcon.textContent = weather.icon;
  weatherLabel.textContent = weather.label;
  weatherMessage.textContent = weather.message;
}

// ======== Ë®àÊ∏¨ÈñãÂßã„Éª„É™„Çª„ÉÉ„Éà ========
startResetBtn.addEventListener("click", () => {
  if (!isTracking) {
    // --- Ë®àÊ∏¨ÈñãÂßã ---
    if (lastLandmarks) {
      baseline = computeNormalizedRatio(lastLandmarks);
      ratioHistory = [];
      stats = { chewCount: 0, elapsedTime: 0, pace: 0 };
      startTime = Date.now();
      isTracking = true;
      updateInterval = setInterval(updateStats, 1000);

      startResetBtn.textContent = "„É™„Çª„ÉÉ„Éà";
      startResetBtn.style.backgroundColor = "#dc3545";
    } else {
      alert("È°î„ÅåÊ§úÂá∫„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ„Ç´„É°„É©„Å´È°î„ÇíÊò†„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ");
    }
  } else {
    // --- „É™„Çª„ÉÉ„Éà ---
    isTracking = false;
    clearInterval(updateInterval);
    baseline = null;
    stats = { chewCount: 0, elapsedTime: 0, pace: 0 };
    updateStats();
    updateWeather(0);

    startResetBtn.textContent = "Ë®àÊ∏¨ÈñãÂßã";
    startResetBtn.style.backgroundColor = "#007bff";
  }
});

// ======== „Ç´„É°„É©Ëµ∑Âãï ========
const camera = new Camera(video, {
  onFrame: async () => await faceMesh.send({ image: video }),
  width: 640,
  height: 480,
});
camera.start();

// ======== Ë∑ùÈõ¢„ÉªÊØîÁéáÈñ¢Êï∞ ========
function computeNormalizedRatio(landmarks) {
  const topLip = landmarks[13];
  const bottomLip = landmarks[14];
  const leftCheek = landmarks[234];
  const rightCheek = landmarks[454];
  const chin = landmarks[152];
  const nose = landmarks[1];

  const mouthOpen = distance(topLip, bottomLip);
  const faceWidth = distance(leftCheek, rightCheek);
  const faceHeight = distance(nose, chin);

  return mouthOpen / ((faceWidth + faceHeight) / 2);
}

function distance(a, b) {
  const dx = a.x - b.x;
  const dy = a.y - b.y;
  const dz = a.z - b.z;
  return Math.sqrt(dx * dx + dy * dy + dz * dz);
}
